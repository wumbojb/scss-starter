//=========================================================//
//                    BREAKPOINTS.SCSS                     //
//=========================================================//
//                                                         //
// Breakpoint mixins for responsive design                 //
// Mobile-first breakpoints with common device sizes       //
// Breakpoint map (em units for better browser support)    //
//                                                         //
//=========================================================//

@use "sass:map";
$breakpoints: (
  xs:   20em,     // 320px
  sm:   36em,     // 576px
  md:   48em,     // 768px
  lg:   62em,     // 992px
  xl:   75em,     // 1200px
  xxl:  87.5em    // 1400px
);

// Mixin for min-width breakpoints (mobile first)
@mixin min($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @media screen and (min-width: map.get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else if type-of($breakpoint) == number {
    @media screen and (min-width: $breakpoint) {
      @content;
    }
  } @else {
    @warn "Breakpoint '#{$breakpoint}' not found. Available breakpoints: #{map-keys($breakpoints)}";
  }
}

// Mixin for max-width breakpoints
@mixin max($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @media screen and (max-width: map.get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else if type-of($breakpoint) == number {
    @media screen and (max-width: $breakpoint) {
      @content;
    }
  } @else {
    @warn "Breakpoint '#{$breakpoint}' not found. Available breakpoints: #{map-keys($breakpoints)}";
  }
}

// Mixin for range between breakpoints
@mixin between($from, $to) {
  @if map.has-key($breakpoints, $from) and map.has-key($breakpoints, $to) {
    @media screen and (min-width: map.get($breakpoints, $from)) and (max-width: map.get($breakpoints, $to)) {
      @content;
    }
  } @else if type-of($from) == number and type-of($to) == number {
    @media screen and (min-width: $from) and (max-width: $to) {
      @content;
    }
  } @else {
    @warn "One or both breakpoints not found. Available breakpoints: #{map-keys($breakpoints)}";
  }
}

//=========================================================//
//                                                         //
// Example usage:                                          //
// .element {                                              //
//   // Mobile styles (default)                            //
//   padding: 1rem;                                        //
//                                                         //
//   // Tablet and up (≥768px)                             //
//   @include min(md) {                                    //
//     padding: 2rem;                                      //
//   }                                                     //
//                                                         //
//   // Only on desktop (≥992px)                           //
//   @include min(lg) {                                    //
//     padding: 3rem;                                      //
//   }                                                     //
//                                                         //
//   // Only on mobile (<576px)                            //
//   @include max(sm) {                                    //
//     font-size: 14px;                                    //
//   }                                                     //
//                                                         //
//   // Only tablet (between 768px and 991px)              //
//   @include between(md, lg) {                            //
//     margin: 2rem;                                       //
//   }                                                     //
// }                                                       //
//                                                         //
//=========================================================//